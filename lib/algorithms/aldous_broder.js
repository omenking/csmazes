// Generated by CoffeeScript 2.7.0
/*
Author: Jamis Buck <jamis@jamisbuck.org>
License: Public domain, baby. Knock yourself out.

The original CoffeeScript sources are always available on GitHub:
http://github.com/jamis/csmazes
*/
Maze.Algorithms.AldousBroder = (function() {
  class AldousBroder extends Maze.Algorithm {
    constructor(maze, options) {
      super(args);
      this.state = 0;
      this.remaining = this.maze.width * this.maze.height;
    }

    isCurrent(x, y) {
      return this.x === x && this.y === y;
    }

    startStep() {
      this.x = this.rand.nextInteger(this.maze.width);
      this.y = this.rand.nextInteger(this.maze.height);
      this.maze.carve(this.x, this.y, this.IN);
      this.updateAt(this.x, this.y);
      this.remaining--;
      this.state = 1;
      return this.carvedOnLastStep = true;
    }

    runStep() {
      var carved, dir, i, len, nx, ny, ref, x, y;
      carved = false;
      if (this.remaining > 0) {
        ref = this.rand.randomDirections();
        for (i = 0, len = ref.length; i < len; i++) {
          dir = ref[i];
          nx = this.x + Maze.Direction.dx[dir];
          ny = this.y + Maze.Direction.dy[dir];
          if (this.maze.isValid(nx, ny)) {
            [x, y, this.x, this.y] = [this.x, this.y, nx, ny];
            if (this.maze.isBlank(nx, ny)) {
              this.maze.carve(x, y, dir);
              this.maze.carve(this.x, this.y, Maze.Direction.opposite[dir]);
              this.remaining--;
              carved = true;
              if (this.remaining === 0) {
                delete this.x;
                delete this.y;
              }
            }
            this.updateAt(x, y);
            this.updateAt(nx, ny);
            break;
          }
        }
      }
      if (carved !== this.carvedOnLastStep) {
        this.eventAt(this.x, this.y);
      }
      this.carvedOnLastStep = carved;
      return this.remaining > 0;
    }

    step() {
      switch (this.state) {
        case 0:
          this.startStep();
          break;
        case 1:
          this.runStep();
      }
      return this.remaining > 0;
    }

  };

  AldousBroder.prototype.IN = 0x1000;

  return AldousBroder;

}).call(this);
