// Generated by CoffeeScript 2.7.0
/*
Author: Jamis Buck <jamis@jamisbuck.org>
License: Public domain, baby. Knock yourself out.

The original CoffeeScript sources are always available on GitHub:
http://github.com/jamis/csmazes
*/
Maze.Algorithms.Sidewinder = (function() {
  class Sidewinder extends Maze.Algorithm {
    isCurrent(x, y) {
      return this.x === x && this.y === y;
    }

    constructor(maze, options) {
      super(args);
      this.x = 0;
      this.y = 0;
      this.runStart = 0;
      this.state = 0;
    }

    step() {
      var cell, oldX, oldY;
      if (this.y >= this.maze.height) {
        return false;
      }
      if (this.y > 0 && (this.x + 1 >= this.maze.width || this.rand.nextBoolean())) {
        cell = this.runStart + this.rand.nextInteger(this.x - this.runStart + 1);
        this.maze.carve(cell, this.y, Maze.Direction.N);
        this.maze.carve(cell, this.y - 1, Maze.Direction.S);
        this.updateAt(cell, this.y);
        this.updateAt(cell, this.y - 1);
        if (this.x - this.runStart > 0) {
          this.eventAt(this.x, this.y);
        }
        this.runStart = this.x + 1;
      } else if (this.x + 1 < this.maze.width) {
        this.maze.carve(this.x, this.y, Maze.Direction.E);
        this.maze.carve(this.x + 1, this.y, Maze.Direction.W);
        this.updateAt(this.x, this.y);
        this.updateAt(this.x + 1, this.y);
      } else {
        this.maze.carve(this.x, this.y, this.IN);
        this.updateAt(this.x, this.y);
      }
      [oldX, oldY] = [this.x, this.y];
      this.x++;
      if (this.x >= this.maze.width) {
        this.x = 0;
        this.runStart = 0;
        this.y++;
      }
      this.updateAt(oldX, oldY);
      this.updateAt(this.x, this.y);
      return this.y < this.maze.height;
    }

  };

  Sidewinder.prototype.IN = 0x1000;

  return Sidewinder;

}).call(this);
